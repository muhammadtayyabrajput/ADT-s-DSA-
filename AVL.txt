#pragma once
#ifndef AVLH_H

#include<iostream>
#include<vector>
#include<queue>
using namespace std;

template<class T>
class AVL;

template<class T>
class AVLNode
{
	T value;
	int height;
	AVLNode<T>* left;
	AVLNode<T>* right;
	friend AVL<T>;
public:
	AVLNode():value(0),height(0),right(NULL),left(NULL)
	{}
	AVLNode(T val)
	{
		value = val;
		left = nullptr;
		right = nullptr;
	}
};

template<class T>
class AVL
{
	AVLNode<T>* root;

	AVLNode<T>* insertValue(AVLNode<T>*,T);
	void insertInVector(AVLNode<T>*, vector<int>&, vector<int>&);
	void makeDeletion(AVLNode<T>*&);
	void deleteN(T, AVLNode<T>*&);
	void deleteAll(AVLNode<T>* node)
	{
		if (!node)
			return;
		deleteAll(node->left);
		deleteAll(node->right);
		delete node;
		node = nullptr;
	}
	void printLevelOrder(AVLNode<T>*);
public:
	AVL():root(nullptr)
	{}
	AVL(const AVL& cpy)
	{
		AVLNode<T>* temp = cpy.root;
		vector<int>v;
		makeCopy(temp,v);
		for (int i = 0; i < v.size(); i++)
		{
			insert(v[i]);
		}
	}
	void makeCopy(AVLNode<T>* cpy,vector<int> &v1)
	{
		if (!cpy)
			return ;
		else
		{
			v1.push_back(cpy->value);
			makeCopy(cpy->left,v1);
			makeCopy(cpy->right,v1);
		}
	}
	AVLNode<T>* getRoot()
	{
		return root;
	}
	void insert(T);
	int getHeight(AVLNode<T>*);
	int getBalanceFactor(AVLNode<T>*);
	AVLNode<T>* getParent(AVLNode<T>*);
	AVLNode<T>* LLrotation(AVLNode<T>*);
	AVLNode<T>* RRrotation(AVLNode<T>*);
	AVLNode<T>* LRrotation(AVLNode<T>*);
	AVLNode<T>* RLrotation(AVLNode<T>*);
	AVLNode<T>* search(T);
	void printNodes()
	{
		printLevelOrder(root);
	}
	void printTree()
	{
		printLevelOrder(root);
	}
	void inOrder(AVLNode<T>* node)
	{
		if (!node)
			return;
		inOrder(node->left);
		cout << node->value << " ";
		inOrder(node->right);
	}
	T getValue(AVLNode<T>* n)
	{
		return n->value;
	}
	bool isBST(AVLNode<T>*);
	void deleteNode(AVLNode<T>* node)
	{
		deleteN(node->value, root);
		//rotate(root);
	}
	~AVL()
	{
		deleteAll(root);
	}
};
template<class T>
void AVL<T>::makeDeletion(AVLNode<T>*& nodePtr)
{
	AVLNode<T>* temp = nullptr;
	if (nodePtr == nullptr)
	{
		cout << "can't delete this node\n";
	}
	else if (nodePtr->right == nullptr)
	{
		temp = nodePtr;
		nodePtr = nodePtr->left;
		delete temp;
		temp = nullptr;
	}
	else if (nodePtr->left == nullptr)
	{
		temp = nodePtr;
		nodePtr = nodePtr->right;
		delete temp;
		temp = nullptr;
	}
	else
	{
		temp = nodePtr->right;
		while (temp->left)
			temp = temp->left;
		temp->left = nodePtr->left;
		temp = nodePtr;
		nodePtr = nodePtr->right;
		delete temp;
		temp = nullptr;
	}
}
template<class T>
void AVL<T>::deleteN(T val, AVLNode<T>*& node)
{
	if (val < node->value)
		deleteN(val, node->left);
	else if (val > node->value)
		deleteN(val, node->right);
	else
		makeDeletion(node);
}

template<class T>
void AVL<T>::insertInVector(AVLNode<T>* node, vector<int>& v1, vector<int>& v2)
{
	if (!node)
		return;
	insertInVector(node->left, v1,v2);
	v1.push_back(node->value);
	node->height = 1 + max(getHeight(node->left), getHeight(node->right));
	int bf = getBalanceFactor(node);
	v2.push_back(bf);
	insertInVector(node->right, v1,v2);
}
template<class T>
bool AVL<T>::isBST(AVLNode<T>* node)
{
	vector<int>v,v2;
	insertInVector(node, v,v2);
	bool flag = true;
	for (int i = 1; i < v.size() - 1; i += 2)
	{
		if (v[i] > v[i - 1])
			flag = true;
		else
			return false;
	}
	for (int i = 1; i < v2.size() - 1; i ++)
	{
		if (v2[i] >= -1 || v2[i] <= 1)
			flag = true;
		else
			return false;
	}
	return true;
}
template<class T>
AVLNode<T>* AVL<T>::getParent(AVLNode<T>* node)
{
	AVLNode<T>* nodePtr = root;
	//cout << "rt" << nodePtr->value << " " << root->value << endl;

	while (nodePtr)
	{
		if (nodePtr->left && nodePtr->left->value == node->value)
		{
			return nodePtr;
		}
		else if (nodePtr->right && nodePtr->right->value == node->value)
		{
			return nodePtr;
		}
		else if (node->value < nodePtr->value)
		{
			nodePtr = nodePtr->left;
		}
		else
		{
			nodePtr = nodePtr->right;
		}
	}
	return nullptr;
}
template<class T>
int AVL<T>::getBalanceFactor(AVLNode<T>* node)
{
	if (!node)
		return 0;
	return getHeight(node->left) - getHeight(node->right);
}
template<class T>
int AVL<T>::getHeight(AVLNode<T>* node)
{
	if (!node)
		return 0;
	return node->height;
}
template<class T>
AVLNode<T>* AVL<T>::LLrotation(AVLNode<T>* node)
{
	AVLNode<T>* p = node->left;
	AVLNode<T>* temp = p->right;
	p->right = node;
	node->left = temp;
	p->height = max(getHeight(p->left), getHeight(p->right)) + 1;
	node->height = max(getHeight(node->left), getHeight(node->right)) + 1;

	return p;
}
template<class T>
AVLNode<T>* AVL<T>::RRrotation(AVLNode<T>* node)
{
	AVLNode<T>* p = node->right;
	AVLNode<T>* temp = p->left;
	p->left = node;
	node->right = temp;
	p->height = max(getHeight(p->left), getHeight(p->right)) + 1;
	node->height = max(getHeight(node->left), getHeight(node->right)) + 1;

	return p;
}
template<class T>
AVLNode<T>* AVL<T>::LRrotation(AVLNode<T>* node)
{
	node->left = RRrotation(node->left);

	return LLrotation(node);
}
template<class T>
AVLNode<T>* AVL<T>::RLrotation(AVLNode<T>* node)
{
	node->right = LLrotation(node->right);

	return RRrotation(node);
}

template<class T>
AVLNode<T>* AVL<T>::insertValue(AVLNode<T>* node,T val)
{
	if (!node)
	{
		AVLNode<T>* newNode = new AVLNode<T>(val);
		newNode->height = 1;
		return newNode;
	}
	if (val < node->value)
		node->left=insertValue(node->left, val);
	else if (val > node->value)
		node->right=insertValue(node->right, val);
	else
		return node;

	node->height = 1 + max(getHeight(node->left), getHeight(node->right)) ;
	int bf = getBalanceFactor(node);
	if (bf > 1 && val < node->left->value)
		return LLrotation(node);
	if (bf<-1 && val>node->right->value)
		return RRrotation(node);
	if (bf > 1 && val > node->left->value)
		return LRrotation(node);
	if (bf < -1 && val < node->right->value)
		return RLrotation(node);

	return node;
}
template<class T>
void AVL<T>::insert(T val)
{
	if (!root)
	{
		AVLNode<T>* newNode = new AVLNode<T>(val);
		newNode->height = 1;
		root = newNode;
		return;
	}
	root=insertValue(root,val);
}
template<class T>
AVLNode<T>* AVL<T>::search(T val)
{
	AVLNode<T>* nodePtr = root;
	while (nodePtr)
	{
		if (nodePtr->value == val)
			return nodePtr;
		else if (val < nodePtr->value)
			nodePtr = nodePtr->left;
		else
			nodePtr = nodePtr->right;
	}
	return nullptr;
}
template<class T>
void AVL<T>::printLevelOrder(AVLNode<T>* node)
{
	if (!node)
		return;
	queue<AVLNode<T>*>q;
	q.push(node);
	q.push(nullptr);

	while (!q.empty())
	{
		AVLNode<T>* temp = q.front();
		q.pop();
		if (temp != nullptr)
		{
			cout << temp->value << " ";
			if (temp->left)
				q.push(temp->left);
			if (temp->right)
				q.push(temp->right);
		}
		else if (!q.empty())
		{
			q.push(nullptr);
		}
	}
	cout << endl;
}

#endif // !AVLH_H
