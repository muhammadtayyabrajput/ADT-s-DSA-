#pragma once
#ifndef STACK_H
#define STACK_H
#include<iostream>

using namespace std;

template<class T>
class Stack
{
protected:
	T* stackArr;
	int stackSize;
	int top;
public:
	Stack(int);
	Stack(const Stack&);
	~Stack();
	Stack<T>& operator=(const Stack<T>&);
	int Size();
	void push(T);
	T pop();
	bool isFull();
	bool isEmpty();
	T peek();
	void reSize(int);
	void infixTopostfix(string& );
	int prec(char);
};
template<class T>
Stack<T>::Stack(int size)
{
	stackArr = new T[size];
	stackSize = size;
	top = -1;
}
template<class T>
Stack<T>::Stack(const Stack<T>& cpy)
{
		stackArr = new T[cpy.stackSize];
	stackSize = cpy.stackSize;
	top = cpy.top;
	for (int i = 0; i < top; i++)
	{
		stackArr[i] = cpy.stackArr[i];
	}
}
template<class T>
Stack<T>::~Stack()
{
		delete[]stackArr;
		stackArr = nullptr;
		stackSize = 0;
		top = 0;
}
template<class T>
Stack<T>& Stack<T>::operator=(const Stack<T>& obj)
{
	if (this != &obj)
	{
	size = obj.stackSize;
	top = obj.top;
	stackArr = new T[stackSize]{ 0 };
	for (int i = 0; i < top; i++)
		stackArr[i] = obj.stackArr[i];
	return *this;
    }
	return *this;
}
template<class T>
int Stack<T>::Size()
{
	return stackSize;
}
template<class T>
void Stack<T>::reSize(int size)
{
	stackSize = size;
	T *temp = new T[stackSize]{ 0 };
	for (int i = 0; i < top; i++)
		temp[i] = stackArr[i];
	delete[]stackArr;
	stackArr = temp;
	temp = nullptr;
}
template<class T>
void Stack<T>::push(T v)
{
	if (isFull())
	{
			reSize(stackSize * 2);
			top++;
			stackArr[top] = v;
	}
	else
	{
		top++;
		stackArr[top] = v;
	}
}
template<class T>
T Stack<T>::pop()
{
	if (top>0&&top <= stackSize / 4)
	{
		reSize(stackSize / 4);
	}
		return stackArr[top--];
}
template<class T>
T Stack<T>::peek()
{
	return stackArr[top-1];
}
template<class T>
bool Stack<T>::isFull()
{
	if (top == stackSize-1)
	{
		return true;
	}
	else
	{
		return false;
	}
}
template<class T>
bool Stack<T>::isEmpty()
{
	if (top == -1)
	{
		return true;
	}
	else
	{
		return false;
	}
}
template<class T>
int Stack<T>::prec(char c)
{
	if (c == '^')
		return 3;
	else if (c == '/' || c == '*')
		return 2;
	else if (c == '+' || c == '-')
		return 1;
	else
		return -1;
}
template<class T>
void Stack<T>::infixTopostfix(string& str)
{
	string res;
	for (int i = 0; i < str.length(); i++)
	{
		if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z') || (str[i] >= '0' && str[i] <= '9'))
		{
			res += str[i];
		}
		else if (str[i] == '(' || str[i] == '{' || str[i] == '[')
			push(str[i]);
		else if (str[i] == ')' || str[i] == '}' || str[i] == ']')
		{
			while (peek() == '(' || peek() == '{' || peek() == '[')
			{
				res += peek();
				pop();
			}
			pop();
		}
		else
		{
			while (!isEmpty() && prec(str[i]) <= prec(peek()))
			{
				if (str[i] == '^' && peek() == '^')
					break;
				else {
					res += peek();
					pop();
				}
			}
			push(str[i]);
		}
	}
	while (!isEmpty())
	{
		res += peek();
		pop();
	}
	cout << res << endl;
}

#endif // !STACK_H
